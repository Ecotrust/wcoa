# Generated by Django 3.2.12 on 2024-02-26 22:31

from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wcoa.models
import wcoa.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0083_workflowcontenttype'),
        ('wcoa', '0020_catalogthemegridpage_catalogthemegridpagedetail'),
    ]

    operations = [
        migrations.CreateModel(
            name='IndicatorCategory',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='IndicatorPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('name', models.CharField(max_length=255)),
                ('description', wagtail.fields.RichTextField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('Score', wagtail.blocks.StructBlock([('state', wagtail.blocks.ChoiceBlock(choices=[('West Coast', 'West Coast'), ('CA', 'California'), ('OR', 'Oregon'), ('WA', 'Washington')])), ('image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('WYSIWYG', wagtail.blocks.RichTextBlock()), ('border', wcoa.blocks.CTARowDivider())], use_json_field=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterField(
            model_name='connectpage',
            name='cta_list',
            field=wagtail.fields.StreamField([('connection', wagtail.blocks.StructBlock([('cta_title', wagtail.blocks.CharBlock(required=False)), ('cta_content', wagtail.blocks.RichTextBlock(required=False)), ('cta_page', wagtail.blocks.PageChooserBlock(label='page', required=False)), ('cta_link', wagtail.blocks.URLBlock(label='URL', required=False)), ('width', wagtail.blocks.IntegerBlock(help_text='Number of columns to span out of 12 (e.g., input of 3 would mean give this a width of 3 out of the 12 (25%))', max_value=12, min_value=0, required=False)), ('text_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color_palette', required=False)), ('background_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('details', wagtail.blocks.RichTextBlock())], use_json_field=True),
        ),
        migrations.AlterField(
            model_name='ctapage',
            name='body',
            field=wagtail.fields.StreamField([('item', wagtail.blocks.StructBlock([('cta_title', wagtail.blocks.CharBlock(required=False)), ('cta_content', wagtail.blocks.RichTextBlock(required=False)), ('cta_page', wagtail.blocks.PageChooserBlock(label='page', required=False)), ('cta_link', wagtail.blocks.URLBlock(label='URL', required=False)), ('width', wagtail.blocks.IntegerBlock(help_text='Number of columns to span out of 12 (e.g., input of 3 would mean give this a width of 3 out of the 12 (25%))', max_value=12, min_value=0, required=False)), ('text_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color_palette', required=False)), ('background_color', wagtail.blocks.ChoiceBlock(choices=[('white', 'White'), ('black', 'Black'), ('blue', 'Blue'), ('green', 'Green'), ('red', 'Red'), ('purple', 'Purple'), ('grey', 'Grey')], icon='color', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('details', wagtail.blocks.RichTextBlock()), ('row', wcoa.blocks.CTARowDivider())], use_json_field=True),
        ),
    ]
